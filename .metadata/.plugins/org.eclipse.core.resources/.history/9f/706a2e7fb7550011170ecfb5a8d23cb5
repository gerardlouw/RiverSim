import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.PriorityQueue;

public class Main {

	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {
		
		generateStats_IncreasingCampsCount();
		for(int numCamps = 225; numCamps > 0; numCamps -= 225/5)
		{
			generateStats_Distrobutions(numCamps);
		}
		
	}
	
	public static void generateStats_IncreasingCampsCount() throws IOException
	{
		int ITERATIONS = 10;
		System.out.println("Generating in increasing camps count stats...");
		BufferedWriter sf = new BufferedWriter(new FileWriter("inc_camp_count_df.txt"));
		BufferedWriter mbf = new BufferedWriter(new FileWriter("inc_camp_count_mbf.txt"));
		BufferedWriter obf = new BufferedWriter(new FileWriter("inc_camp_count_obf.txt"));
		Stats.writeHeader(sf,mbf,obf,ITERATIONS);
		
		Stats s;
		double[] mbProbs = uniformDistro(Constants.MIN_DAYS,(Constants.MAX_DAYS+Constants.MIN_DAYS)/2);
		double[] obProbs = uniformDistro((Constants.MAX_DAYS+Constants.MIN_DAYS)/2,Constants.MAX_DAYS);
		double mb_div_ob = 1;
		
		System.out.print("Number of camps: ");
		for(int numCamps = 20; numCamps < 200; numCamps++)
		{
			for(int i = 0; i < ITERATIONS; i++)
			{
				s = new Stats(numCamps,Constants.STD_MB_HOURS,Constants.STD_OB_HOURS,Constants.STD_PRIORITY_BIAS,mbProbs,obProbs,mb_div_ob);
				runSim(s);
				s.writeFileEntry(sf, mbf, obf);
			}
			System.out.printf("%d ",numCamps);
			if((numCamps+1) % 30 == 0)
				System.out.println();
		}
		System.out.println();
		
		sf.close();
		mbf.close();
		obf.close();
	}
	
	public static void generateStats_Distrobutions(int numCamps) throws IOException
	{
		int ITERATIONS = 100;
		System.out.printf("Generating distrobution stats for %d camp sites...\n",numCamps);
		generateStats_uniDistro(numCamps, ITERATIONS);
		generateStats_normalDistro(numCamps, ITERATIONS);
		generateStats_linDistro(numCamps, ITERATIONS);
	}
	
	public static void generateStats_uniDistro(int numCamps, int ITERATIONS) throws IOException
	{
		System.out.printf("Generating uniform distrobutions...\n");

		double[] mbProbs = uniformDistro(Constants.MIN_DAYS,(Constants.MAX_DAYS+Constants.MIN_DAYS)/2);
		double[] obProbs = uniformDistro((Constants.MAX_DAYS+Constants.MIN_DAYS)/2,Constants.MAX_DAYS);
		writeDistroFile(mbProbs, obProbs, "uni_dis.txt");
		generateStats_xDistro(numCamps, ITERATIONS, "uni_dis_", mbProbs, obProbs);
	}

	public static void generateStats_normalDistro(int numCamps, int ITERATIONS) throws IOException
	{
		System.out.printf("Generating normal distrobutions...\n");
		
		double[] mbProbs = normalDistro(Constants.MIN_DAYS,Constants.MAX_DAYS);
		double[] obProbs = normalDistro(Constants.MIN_DAYS,Constants.MAX_DAYS);
		writeDistroFile(mbProbs, obProbs, "normal_dis.txt");
		generateStats_xDistro(numCamps, ITERATIONS, "normal_dis_", mbProbs, obProbs);
	}
	
	public static void generateStats_linDistro(int numCamps, int ITERATIONS) throws IOException
	{
		System.out.printf("Generating linear distrobutions...\n");
		
		double[] mbProbs = linearDistro(-2,2*Constants.MAX_DAYS,Constants.MIN_DAYS,Constants.MAX_DAYS);
		double[] obProbs = linearDistro(-2,2*Constants.MAX_DAYS,Constants.MIN_DAYS,Constants.MAX_DAYS);
		writeDistroFile(mbProbs, obProbs, "linn_dis.txt");
		generateStats_xDistro(numCamps, ITERATIONS, "linp_dis_", mbProbs, obProbs);
		
		mbProbs = linearDistro(4,0,Constants.MIN_DAYS,Constants.MAX_DAYS);
		obProbs = linearDistro(4,0,Constants.MIN_DAYS,Constants.MAX_DAYS);
		writeDistroFile(mbProbs, obProbs, "linn_dis.txt");
		generateStats_xDistro(numCamps, ITERATIONS, "linn_dis_", mbProbs, obProbs);
	}
	
	public static void generateStats_xDistro(int numCamps, int ITERATIONS, String filePrefix, double[] mbProbs, double[] obProbs) throws IOException
	{
		Stats s;
		System.out.printf("Generating %s***.txt...\n",filePrefix);
		
		BufferedWriter sf = new BufferedWriter(new FileWriter(filePrefix+numCamps+"_df.txt"));
		BufferedWriter mbf = new BufferedWriter(new FileWriter(filePrefix+numCamps+"_mbf.txt"));
		BufferedWriter obf = new BufferedWriter(new FileWriter(filePrefix+numCamps+"_obf.txt"));
		Stats.writeHeader(sf,mbf,obf,ITERATIONS);
		
		double mb_div_ob = 1;
		
		for(int i = 0; i < ITERATIONS; i++)
		{
			s = new Stats(numCamps,Constants.STD_MB_HOURS,Constants.STD_OB_HOURS,Constants.STD_PRIORITY_BIAS,mbProbs,obProbs,mb_div_ob);
			runSim(s);
			s.writeFileEntry(sf, mbf, obf);
		}
		
		sf.close();
		mbf.close();
		obf.close();
	}
	
	public static void writeDistroFile(double[] mbProbs, double[] obProbs, String fileName) throws IOException
	{
		BufferedWriter bw = new BufferedWriter(new FileWriter(fileName));
		for(int i = 0; i < mbProbs.length; i++)
		{
			bw.write(mbProbs[i]+"");
			if(i != mbProbs.length - 1)
				bw.write(",");
			else
				bw.write('\n');
		}
		for(int i = 0; i < obProbs.length; i++)
		{
			bw.write(obProbs[i]+"");
			if(i != obProbs.length - 1)
				bw.write(",");
			else
				bw.write('\n');
		}
		bw.close();
	}
	
	public static void runSim(Stats stats)
	{
		PriorityQueue<Boat> boats = new PriorityQueue<Boat>();
		PriorityQueue<Boat> boats_bak = new PriorityQueue<Boat>();
		
		boolean[] occupied = new boolean[stats.NUM_CAMPS + 1];
		int mbcount = 0;
		int obcount = 0;
		for (int days = 1; days <= Constants.SIMUL_DAYS; days++) {
			
			Arrays.fill(occupied, false);
			while (!boats.isEmpty())
			{
				Boat top = boats.poll();
				if( top.hasArrived() ) continue;
				if( !top.move(occupied) ) continue;
				boats_bak.add(top);
				top.age();
				if (top.getLocation() == stats.NUM_CAMPS)
				{
					top.arrive();
				}
				else
				{
					occupied[top.getLocation()] = true;
				}
			}
			
			PriorityQueue<Boat> tmp = boats;
			boats = boats_bak;
			boats_bak = tmp;
			
			//fill boats
			int i;
			for (i = 0; i < stats.MB_RANGE; i++) {
				if (occupied[i]) continue;
				if(i < stats.OB_RANGE){
					if (mbcount > stats.MB_DIV_OB*obcount){
						addOarBoat(i,stats,occupied,boats);
						obcount++;
					}else{
						addMotorBoat(i,stats,occupied,boats);
						mbcount++;
					}
					//b = (Constants.RANDOM.nextDouble() < stats.MB_BIAS) ? new MotorBoat(stats) : new OarBoat(stats);
				}
				else{
					addMotorBoat(i,stats,occupied,boats);
					mbcount++;
				}
				
			}
			
			stats.completeDay(days,occupied);
		}
		
		//System.out.println("Demand: "+ Arrays.toString(campsDemand));
	}
	
	public static void addMotorBoat(int location, Stats s, boolean[] occupied, PriorityQueue<Boat> bList)
	{
		double[] probs = s.getProbsMotor();
		double p = Constants.RANDOM.nextDouble() * probs[probs.length - 1];
		Boat b = null;
		for (int T = 0; T < probs.length; T++) {
			if  (probs[T] > p) {
				b = new MotorBoat(s, T);
				break;
			}
		}
		//System.out.println(Arrays.toString(probs));
		b.setLocation(location);
		occupied[location] = true;
		bList.add(b);
	}
	
	public static void addOarBoat(int location, Stats s, boolean[] occupied, PriorityQueue<Boat> bList)
	{
		double[] probs = s.getProbsOar();
		double p = Constants.RANDOM.nextDouble() * probs[probs.length - 1];
		Boat b = null;
		for (int T = 0; T < probs.length; T++) {
			if  (probs[T] > p) {
				b = new OarBoat(s, T);
				break;
			}
		}
		b.setLocation(location);
		occupied[location] = true;
		bList.add(b);
	}
	
	public static double[] linearDistro(double m, double c, int startX, int endX)
	{
		double[] dis = new double [Constants.MAX_DOCUMENTED_T];
		double sum = 0;
		for (int x = startX; x <= endX; x++) {
			double val = m*x + c;
			dis[x] = val;
			sum += val;
		}
		for (int x = startX; x <= endX; x++) {
			dis[x] /= sum;
		}
		return dis;
	}
	
	public static double[] normalDistro(int startX, int endX)
	{
		double[] dis = new double [Constants.MAX_DOCUMENTED_T];
		double stDev = (endX - startX) / 8;
		double mean = (endX + startX)/2;
		double a = 1.0/-2*stDev*stDev;
		
		double sum = 0;
		for (int x = startX; x <= endX; x++) {
			double val = Math.exp(a*Math.pow(x - mean, 2));
			dis[x] = val;
			sum += val;
		}
		for (int x = startX; x <= endX; x++) {
			dis[x] /= sum;
		}
		return dis;
	}
	
	public static double[] uniformDistro(int startX, int endX)
	{
		double[] dis = new double [Constants.MAX_DOCUMENTED_T];
		double val = 1.0/(endX-startX+1);
		for (int x = startX; x <= endX; x++) {
			dis[x] = val;
		}
		return dis;
	}
	
	public static double[] sinDistro(int startX, int endX, double periode, double amplitude)
	{
		double[] dis = new double [Constants.MAX_DOCUMENTED_T];
		double w = 2*Math.PI/periode;
		
		double sum = 0;
		for (int x = startX; x <= endX; x++) {
			double val = Math.sin(w*x);
			dis[x] = val;
			sum += val;
		}
		for (int x = startX; x <= endX; x++) {
			dis[x] /= sum;
		}
		return dis;
	}
}
