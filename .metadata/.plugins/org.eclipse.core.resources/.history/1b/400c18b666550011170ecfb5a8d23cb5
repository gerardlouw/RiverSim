import java.io.BufferedWriter;
import java.io.IOException;
import java.util.Arrays;


public class Stats {
	
	public final int NUM_CAMPS;
	public final double DELTA;
	
	public final double MB_HOURS;
	public final double MB_GOAL_AVG;
	public final double MB_GOAL_VAR;
	public final double MB_RANGE;
	
	public final double OB_HOURS;
	public final double OB_GOAL_AVG;
	public final double OB_GOAL_VAR;
	public final double OB_RANGE;
	
	public final double PRIORITY_BIAS;
	
	private int[] tripsTotalsOarBoat;
	private int[] tripsTotalsMotorBoat;
	private int totalOarBoatTrips;
	private int totalMotorBoatTrips;
	private double[] campsPopulated;
	private int deadlocks;
	private int[] lateBoats;
	private int[] earlyBoats;
	private double campsPopulatedAverage;
	
	public double[] MB_X;
	public double[] OB_X;
	
	public Stats( int numCamps,
				  double mbHours, double mbGoalAvg, double mbGoalVar,
				  double obHours, double obGoalAvg, double obGoalVar,
				  double priorityBias,
				  double[] MB_X, double[] OB_X)
	{
		NUM_CAMPS = numCamps;
		DELTA = Constants.RIVER_LENGTH / (NUM_CAMPS + 1);
		
		MB_HOURS = mbHours;
		MB_GOAL_AVG = mbGoalAvg;
		MB_GOAL_VAR = mbGoalVar;
		
		OB_HOURS = obHours;
		OB_GOAL_AVG = obGoalAvg;
		OB_GOAL_VAR = obGoalVar;
		
		MB_RANGE = (int)(MB_HOURS * MotorBoat.SPEED / DELTA);
		OB_RANGE = (int)(OB_HOURS * OarBoat.SPEED / DELTA);
		
		PRIORITY_BIAS = priorityBias;
	
		tripsTotalsOarBoat = new int [Constants.MAX_DAYS + 10];
		tripsTotalsMotorBoat = new int [Constants.MAX_DAYS + 10];
		totalOarBoatTrips = 0;
		totalMotorBoatTrips = 0;
		
		campsPopulated = new double [Constants.SIMUL_DAYS];
		deadlocks = 0;
		lateBoats = new int [3];
		earlyBoats = new int [3];
		campsPopulatedAverage = 0;
		this.MB_X = MB_X;
		this.OB_X = OB_X;
	}
	
	public void completedTrip(Boat b)
	{
		if(b instanceof MotorBoat)
		{
			incrementMotorTripsTotal(b.getAge());
		}
		else if( b instanceof OarBoat )
		{
			incrementOarTripsTotal(b.getAge());
		}
		
		int dLeft = b.getDaysLeft();
		if ( dLeft < 0 )
		{
			lateBoats[Math.min(-dLeft - 1, 2)]++;
		}
		else if( dLeft > 0 )
		{
			earlyBoats[Math.min(dLeft - 1, 2)]++;
		}
	}
	
	public void completeDay(int day, boolean[] occupied)
	{
		countPopulation(day, occupied);
	}
	
	public void deadlock(int age)
	{
		campsPopulatedAverage -= ((double)age)/(NUM_CAMPS*Constants.SIMUL_DAYS);
		deadlocks++;
	}
	
	public int [] getTripTotals()
	{
		int[] arrayAdded = Arrays.copyOf(tripsTotalsOarBoat, tripsTotalsOarBoat.length);
		for(int i = 0; i < arrayAdded.length; i++)
		{
			arrayAdded[i] += tripsTotalsMotorBoat[i];
		}
		return arrayAdded;
	}
	
	public int getTotalTrips()
	{
		return getTotalTripsOarBoat() + getTotalTripsMotorBoat();
	}
	
	public int getTotalTripsOarBoat()
	{
		return totalOarBoatTrips;
	}
	
	public int getTotalTripsMotorBoat()
	{
		return totalMotorBoatTrips;
	}
	
	public int[] getTripsTotalsOarBoat() {
		return tripsTotalsOarBoat;
	}

	public int[] getTripsTotalsMotorBoat() {
		return tripsTotalsMotorBoat;
	}

	public double[] getCampsPopulated() {
		return campsPopulated;
	}

	public int getDeadlocks() {
		return deadlocks;
	}

	public int[] getLateBoats() {
		return lateBoats;
	}

	public int[] getEarlyBoats() {
		return earlyBoats;
	}
	
	public double getCampsPopulateVar() {
		double var = 0;
		for (int i = 0; i < campsPopulated.length; i++) {
			var += Math.pow(campsPopulated[i] - campsPopulatedAverage, 2);
		}
		return var / (campsPopulated.length - 1);
	}

	private void incrementOarTripsTotal(int tripDuration)
	{
		tripsTotalsOarBoat[tripDuration]++;
		totalOarBoatTrips++;
	}
	
	private void incrementMotorTripsTotal(int tripDuration)
	{
		tripsTotalsMotorBoat[tripDuration]++;
		totalMotorBoatTrips++;
	}
	
	private void countPopulation(int day, boolean[] occupied)
	{
		double per = campsPopulated[day-1];
		campsPopulated[day-1] = 0;
		for(int i = 0; i < occupied.length-1; i++)
		{
			if(occupied[i]){
				per += 1.0/NUM_CAMPS;
			}
			
		}
		campsPopulated[day-1] = per;
		campsPopulatedAverage += per / Constants.SIMUL_DAYS;
	}
	
	public double optimalTripsTotal()
	{
		int [] tripTotals = getTripTotals();
		
		double average = 0;
		int sum = 0;
		for(int i = 1; i < tripTotals.length; i++)
		{
			sum += tripTotals[i];
			average += i * tripTotals[i];
		}
		average /= sum;
		return Constants.SIMUL_DAYS*NUM_CAMPS/average;
	}
	
	@Override
	public String toString()
	{
		StringBuilder sb = new StringBuilder();
		
		String header = String.format(" *** Simulation Results (Num camps: %d) ***\n", NUM_CAMPS);
		sb.append(header);
		
		String totalMBTrips = String.format("Total MB trips: %d\n", getTotalTripsMotorBoat());
		sb.append(totalMBTrips);
		
		String totalOBTrips = String.format("Total OB trips: %d\n", getTotalTripsOarBoat());
		sb.append(totalOBTrips);
		
		String totalInfo = String.format("Trip totals: %s\n", Arrays.toString(getTripTotals()));
		sb.append(totalInfo);
		
		String totalTripsInfo = String.format("Total trips: %d\n", getTotalTrips());
		sb.append(totalTripsInfo);
		
		String optimalTotal = String.format("Optimal trips total: %.2f\n", optimalTripsTotal());
		sb.append(optimalTotal);
		
		String deadlockInfo = String.format("Deadlocks: %d\n", deadlocks);
		sb.append(deadlockInfo);
		
		String campInfo = "Camp occupancy %: [ ";
		sb.append(campInfo);
		
		for(int i = 0; i < campsPopulated.length; i++)
		{
			sb.append(String.format("%.2f ", campsPopulated[i] * 100));
		}
		
		sb.append(" \n");
		
		String campPopAvg = String.format("Camp occupancy %%: average %.2f, variance %.2f\n", campsPopulatedAverage * 100, getCampsPopulateVar() * 100);
		sb.append(campPopAvg);
		
		String lateBoatsInfo = String.format("Late boats: %s\n", Arrays.toString(lateBoats));
		sb.append(lateBoatsInfo);
		
		String earlyBoatsInfo = String.format("Early boats: %s\n", Arrays.toString(earlyBoats));
		sb.append(earlyBoatsInfo);
		
		return sb.toString();
	}
	
	public static void writeHeader(BufferedWriter sf)
	{
		try {
			sf.write("NUM_CAMPS,MB_TRIPS,OB_TRIPS,TOTAL_TRIPS,OPTIMAL_TRIPS_TOTAL,CAMP_POPULATION_PERCENTAGE\n");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void writeFileEntry(BufferedWriter sf, BufferedWriter mbf, BufferedWriter obf)
	{
		try {
			sf.write(String.format("%d,%d,%d,%d,%f,%f\n",NUM_CAMPS,getTotalTripsMotorBoat(), getTotalTripsOarBoat(),getTotalTrips(), optimalTripsTotal(),campsPopulatedAverage));
			for(int i = 0; i < tripsTotalsMotorBoat.length; i++)
			{
				mbf.write(tripsTotalsMotorBoat[i]+"");
				if(i != tripsTotalsMotorBoat.length - 1)
					mbf.write(",");
				else
					mbf.write('\n');
			}
			for(int i = 0; i < tripsTotalsOarBoat.length; i++)
			{
				obf.write(tripsTotalsOarBoat[i]+"");
				if(i != tripsTotalsOarBoat.length - 1)
					obf.write(",");
				else
					obf.write('\n');
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public double [] getProbsOar()
	{
		double [] probs = new double [tripsTotalsOarBoat.length];
		for(int T = 0; T < probs.length; T++)
		{
			double tt = tripsTotalsOarBoat[T];
			//if(tt == 0)
				probs[T] = OB_X[T];
			/*else
				probs[T]= OB_X[T]*OB_X[T] / tt;*/
			if (T > 0)
				probs[T] += probs[T-1]; 
		}
		return probs;
	}
	
	public double [] getProbsMotor()
	{
		double [] probs = new double [tripsTotalsMotorBoat.length];
		for(int T = 0; T < probs.length; T++)
		{
			double tt = tripsTotalsMotorBoat[T];
			//if(tt == 0)
				probs[T] = MB_X[T];
			/*else
				probs[T] = MB_X[T]*MB_X[T] / tt;*/
			if (T > 0)
				probs[T] += probs[T-1]; 
		}
		return probs;
	}
	
}
